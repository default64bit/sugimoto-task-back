// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL_NON_POOLING") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Products {
  id      String           @id @default(cuid())
  images  ProductImages[]
  name    String           @db.VarChar(255)
  desc    String           @db.Text
  price   Float
  options ProductOptions[] @relation("ProductOptions") // many-to-many
  reviews ProductReviews[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImages {
  id       String  @id @default(cuid())
  imageUrl String
  visible  Boolean @default(true)

  productId String
  product   Products? @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductOptions {
  id           String                @id @default(cuid())
  name         String                @db.VarChar(255)
  desc         String?               @db.Text
  optionValues ProductOptionValues[]
  products     Products[]            @relation("ProductOptions") // many-to-many

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductOptionValues {
  id              Int     @id @default(autoincrement())
  value           String  @db.VarChar(255)
  desc            String? @db.Text
  extraAddedPrice Float  @default(0)

  productOptionsId String
  ProductOptions   ProductOptions? @relation(fields: [productOptionsId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductReviews {
  id         String  @id @default(cuid())
  user       String? @db.VarChar(255)
  reviewText String  @db.Text
  rating     Int // 1 - 5

  productId String
  product   Products @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
